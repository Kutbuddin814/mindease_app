# -*- coding: utf-8 -*-
"""mindease_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nwB0LflRa0_nulsakxLqgqmjHW-S_9zp
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import display, Markdown
import ipywidgets as widgets
import joblib

# Expanded dataset with more diseases and symptoms
data = {
    'fever':         [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
    'cough':         [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0],
    'fatigue':       [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],
    'headache':      [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1],
    'nausea':        [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0],
    'body_pain':     [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0],
    'chills':        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1],
    'loss_of_smell': [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
    'diarrhea':      [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
    'vomiting':      [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
    'disease': [
        'Flu', 'Food Poisoning', 'Migraine', 'Cold', 'Flu', 'Migraine', 'Flu', 'Flu',
        'COVID-19', 'Malaria', 'Dengue', 'Typhoid'
    ]
}

df = pd.DataFrame(data)

# Train model
X = df.drop("disease", axis=1)
y = df["disease"]
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)

# Save model (optional)
joblib.dump(model, "enhanced_physical_health_model.pkl")

# Dropdowns for new symptoms (label, value)
body_pain = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Body Pain:')
chills = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Chills:')
loss_of_smell = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Loss of Smell:')
diarrhea = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Diarrhea:')
vomiting = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Vomiting:')

# Existing dropdowns (already fixed)
fever = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Fever:')
cough = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Cough:')
fatigue = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Fatigue:')
headache = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Headache:')
nausea = widgets.Dropdown(options=[('No', 0), ('Yes', 1)], value=0, description='Nausea:')

# Button & output
predict_button = widgets.Button(description="Predict Disease", button_style='success')
output = widgets.Output()

# Prevention tips
tips = {
    'Flu': (
        "🛌 *Rest*: Get plenty of sleep.\n"
        "💧 *Hydration*: Drink lots of fluids (water, soup, herbal tea).\n"
        "💊 *Medicine*: Use over-the-counter meds for fever and body aches.\n"
        "🚫 *Avoid*: Cold exposure and crowded areas if contagious."
    ),

    'Cold': (
        "🧣 *Stay Warm*: Use a scarf or warm clothing.\n"
        "🍵 *Steam*: Inhale steam to clear nasal blockage.\n"
        "🛌 *Rest*: Let your body recover naturally.\n"
        "🌿 *Natural Remedies*: Honey, ginger, and tulsi can help."
    ),

    'Migraine': (
        "🌗 *Avoid Bright Light*: Rest in a dark, quiet room.\n"
        "💊 *Pain Relievers*: Use prescribed medications.\n"
        "🧘 *Relaxation*: Try deep breathing or meditation.\n"
        "📖 *Track Triggers*: Keep a diary of foods/situations causing migraines."
    ),

    'Food Poisoning': (
        "💦 *Hydrate*: Drink ORS (oral rehydration salts) or coconut water.\n"
        "🥣 *Eat Light*: Begin with bananas, toast, or rice.\n"
        "🧼 *Hygiene*: Wash hands and clean utensils properly.\n"
        "❗ *Consult Doctor*: If vomiting/diarrhea persists for 2+ days."
    ),

    'Typhoid': (
        "💊 *Antibiotics*: Take the full prescribed course.\n"
        "🥣 *Soft Diet*: Eat porridge, khichdi, or soup.\n"
        "🚰 *Boil Water*: Only drink purified or boiled water.\n"
        "🚫 *Avoid Raw Food*: Especially street food or cut fruits."
    ),

    'Malaria': (
        "🛏️ *Rest & Medication*: Start anti-malarial drugs early.\n"
        "🦟 *Mosquito Protection*: Use repellents and nets.\n"
        "🌡️ *Monitor Fever*: Keep track of spikes.\n"
        "🚰 *Hydration*: Keep fluids up to avoid weakness."
    ),

    'COVID-19': (
        "😷 *Isolate*: Avoid contact until negative.\n"
        "🧼 *Sanitize*: Wash hands and disinfect surfaces.\n"
        "🧘 *Monitor Symptoms*: Especially breathing and O2 levels.\n"
        "🏥 *Seek Help*: For persistent fever or chest tightness."
    ),

    'Dengue': (
        "🛌 *Rest*: Avoid exertion.\n"
        "💧 *Fluids*: Coconut water, ORS, and papaya leaf juice (optional).\n"
        "🩸 *Monitor Platelets*: Get blood tests regularly.\n"
        "🚫 *No Aspirin*: Avoid blood-thinning meds."
    )
}

def on_predict(b):
    with output:
        output.clear_output()
        x_input = np.array([[
            fever.value, cough.value, fatigue.value, headache.value, nausea.value,
            body_pain.value, chills.value, loss_of_smell.value, diarrhea.value, vomiting.value
        ]])

        prediction = model.predict(x_input)[0]
        probs = model.predict_proba(x_input)[0]
        classes = model.classes_

        display(Markdown(f"### 🩺 Likely Disease: **{prediction}**"))
        display(Markdown(f"#### 💡 Prevention Tip:\n{tips.get(prediction, 'Please consult a healthcare professional.')}"))

        # Probability chart
        plt.figure(figsize=(8, 4))
        plt.bar(classes, probs, color='lightgreen')
        plt.title("Prediction Probabilities")
        plt.ylabel("Confidence")
        for i, p in enumerate(probs):
            plt.text(i, p + 0.02, f"{p:.2f}", ha='center')
        plt.ylim(0, 1.1)
        plt.show()

predict_button.on_click(on_predict)

display(Markdown("## 🤖 Please Select Your Symptoms Below"))
display(fever, cough, fatigue, headache, nausea,
        body_pain, chills, loss_of_smell, diarrhea, vomiting,
        predict_button, output)