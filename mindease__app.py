# -*- coding: utf-8 -*-
"""mindease__app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OYChBZ42X_JzLgn3jgmymkNvww4WCVIN
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import joblib
import streamlit.components.v1 as components

# Load trained model
model = joblib.load("enhanced_physical_health_model.pkl")

# App config
st.set_page_config(page_title="DualCare: AI Health Assistant", layout="centered")
st.title(" DualCare: AI Assistant for Mental & Physical Health")

# Section: Mental Health Chatbot (Botpress Embed)
st.header(" Mental Health Chatbot")
st.markdown("Talk to the chatbot below for support based on how you're feeling:")
components.html("""
<script src="https://cdn.botpress.cloud/webchat/v3.2/inject.js" defer></script>
<script src="https://files.bpcontent.cloud/2025/07/17/16/20250717162635-FQK11ES7.js" defer></script>
""", height=500)

# Section: Physical Health Checker
st.header(" Physical Health Symptom Checker")
st.markdown("Select your symptoms to get a disease prediction and tips.")

# Symptom inputs
fever = st.selectbox("Fever:", ["No", "Yes"])
cough = st.selectbox("Cough:", ["No", "Yes"])
fatigue = st.selectbox("Fatigue:", ["No", "Yes"])
headache = st.selectbox("Headache:", ["No", "Yes"])
nausea = st.selectbox("Nausea:", ["No", "Yes"])
body_pain = st.selectbox("Body Pain:", ["No", "Yes"])
chills = st.selectbox("Chills:", ["No", "Yes"])
loss_of_smell = st.selectbox("Loss of Smell:", ["No", "Yes"])
diarrhea = st.selectbox("Diarrhea:", ["No", "Yes"])
vomiting = st.selectbox("Vomiting:", ["No", "Yes"])

# Convert to numeric
inputs = [fever, cough, fatigue, headache, nausea, body_pain, chills, loss_of_smell, diarrhea, vomiting]
x_input = np.array([[1 if val == "Yes" else 0 for val in inputs]])

# Tips dictionary
tips = {
    'Flu': (
        "🛌 *Rest*: Get plenty of sleep.\n"
        "💧 *Hydration*: Drink lots of fluids (water, soup, herbal tea).\n"
        "💊 *Medicine*: Use over-the-counter meds for fever and body aches.\n"
        "🚫 *Avoid*: Cold exposure and crowded areas if contagious."
    ),

    'Cold': (
        "🧣 *Stay Warm*: Use a scarf or warm clothing.\n"
        "🍵 *Steam*: Inhale steam to clear nasal blockage.\n"
        "🛌 *Rest*: Let your body recover naturally.\n"
        "🌿 *Natural Remedies*: Honey, ginger, and tulsi can help."
    ),

    'Migraine': (
        "🌗 *Avoid Bright Light*: Rest in a dark, quiet room.\n"
        "💊 *Pain Relievers*: Use prescribed medications.\n"
        "🧘 *Relaxation*: Try deep breathing or meditation.\n"
        "📖 *Track Triggers*: Keep a diary of foods/situations causing migraines."
    ),

    'Food Poisoning': (
        "💦 *Hydrate*: Drink ORS (oral rehydration salts) or coconut water.\n"
        "🥣 *Eat Light*: Begin with bananas, toast, or rice.\n"
        "🧼 *Hygiene*: Wash hands and clean utensils properly.\n"
        "❗ *Consult Doctor*: If vomiting/diarrhea persists for 2+ days."
    ),

    'Typhoid': (
        "💊 *Antibiotics*: Take the full prescribed course.\n"
        "🥣 *Soft Diet*: Eat porridge, khichdi, or soup.\n"
        "🚰 *Boil Water*: Only drink purified or boiled water.\n"
        "🚫 *Avoid Raw Food*: Especially street food or cut fruits."
    ),

    'Malaria': (
        "🛏️ *Rest & Medication*: Start anti-malarial drugs early.\n"
        "🦟 *Mosquito Protection*: Use repellents and nets.\n"
        "🌡️ *Monitor Fever*: Keep track of spikes.\n"
        "🚰 *Hydration*: Keep fluids up to avoid weakness."
    ),

    'COVID-19': (
        "😷 *Isolate*: Avoid contact until negative.\n"
        "🧼 *Sanitize*: Wash hands and disinfect surfaces.\n"
        "🧘 *Monitor Symptoms*: Especially breathing and O2 levels.\n"
        "🏥 *Seek Help*: For persistent fever or chest tightness."
    ),

    'Dengue': (
        "🛌 *Rest*: Avoid exertion.\n"
        "💧 *Fluids*: Coconut water, ORS, and papaya leaf juice (optional).\n"
        "🩸 *Monitor Platelets*: Get blood tests regularly.\n"
        "🚫 *No Aspirin*: Avoid blood-thinning meds."
    )
}
# Predict button
if st.button("🔍 Predict Disease"):
    prediction = model.predict(x_input)[0]
    probs = model.predict_proba(x_input)[0]
    classes = model.classes_

    st.markdown(f"### 🩺 Likely Disease: **{prediction}**")
    st.markdown(f"#### 💡 Prevention Tips:\n{tips.get(prediction, 'Consult a doctor.')}")

    # Bar chart
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.bar(classes, probs, color="lightgreen")
    ax.set_title("Prediction Probabilities")
    ax.set_ylabel("Confidence")
    for i, p in enumerate(probs):
        ax.text(i, p + 0.01, f"{p:.2f}", ha='center')
    ax.set_ylim(0, 1.1)
    st.pyplot(fig)
